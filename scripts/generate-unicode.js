const isUnicodeIDStartRegex = require(`unicode-13.0.0/Binary_Property/ID_Start/regex`);
const isUnicodeIDContinueRegex = require(`unicode-13.0.0/Binary_Property/ID_Continue/regex`);
const MAX_UNICODE_CODEPOINT = 0x10ffff;
const isUnicodeIDStart = (c) => isUnicodeIDStartRegex.test(c);
const isUnicodeIDContinue = (c) => isUnicodeIDContinueRegex.test(c) || isUnicodeIDStart(c);

let partsActive = false;
let startsActive = false;

const parts = [];
const starts = [];

for (let i = 0; i < MAX_UNICODE_CODEPOINT; i++) {
  if (isUnicodeIDStart(String.fromCodePoint(i)) !== startsActive) {
    starts.push(i - +startsActive);
    startsActive = !startsActive;
  }
  if (isUnicodeIDContinue(String.fromCodePoint(i)) !== partsActive) {
    parts.push(i - +partsActive);
    partsActive = !partsActive;
  }
}

console.log(`/**
* Generated by scripts/regenerate-unicode-identifier-parts.js on node ${process.version} with unicode ${process.versions.unicode}
* based on http://www.unicode.org/reports/tr31/ and https://www.ecma-international.org/ecma-262/6.0/#sec-names-and-keywords
*/`);
console.log(`const unicodeIdentifierStart = [${starts.join(', ')}];`);
console.log(`const unicodeIdentifierPart = [${parts.join(', ')}];`);
